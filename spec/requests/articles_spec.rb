# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/articles", type: :request do
  include S3DownloadHelper

  describe "GET /index" do
    before { stub_s3_download }
    it "renders a successful response" do
      get articles_url
      expect(response).to be_successful
    end

    it 'downloads the s3 archive' do
      expect { get articles_url }.to change { S3Download.count }.by(1)
    end

    it 'creates articles for each entry in the archive' do
      expect { get articles_url }.to change { Article.count }.by(25)
    end
  end

  describe 'POST /:id/like' do
    context 'with no article' do
      it 'raises' do
        expect { post like_article_url(12_345) }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end

    context 'with article' do
      let!(:article) { FactoryBot.create :article }

      it 'inserts an associated like record' do
        expect { post like_article_url(article.id) }.to change { article.likes.count }.by(1)
      end

      it 'redirects to /index' do
        post like_article_url(article.id)
        expect(response).to redirect_to articles_url
      end

      context 'with existing likes' do
        before { FactoryBot.create :like, article: article }

        it 'inserts an associated like record' do
          expect { post like_article_url(article.id) }.to change { article.likes.count }.by(1)
        end
      end

      context 'with wrong :id' do
        it 'raises' do
          expect { post like_article_url(article.id + 12_345) }.to raise_error(ActiveRecord::RecordNotFound)
        end
      end
    end
  end
end
